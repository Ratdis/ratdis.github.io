<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>墨染的樱花🌸</title>
  
  <subtitle>成就今日 启迪未来</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ratdis.github.io/"/>
  <updated>2019-04-07T14:27:18.389Z</updated>
  <id>https://ratdis.github.io/</id>
  
  <author>
    <name>Ratdis</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Sony Xperia XZ1(G8342)强刷笔记</title>
    <link href="https://ratdis.github.io/2019/04/07/sony-xz1-flash-note/"/>
    <id>https://ratdis.github.io/2019/04/07/sony-xz1-flash-note/</id>
    <published>2019-04-07T02:26:50.000Z</published>
    <updated>2019-04-07T14:27:18.389Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>不是同型号或者是索尼手机的，本文并没有啥参考价值的说<del>水</del></p></blockquote><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>由于2700mAh<strong>超大</strong>电池而且无root的XZ1在各类流氓面前不堪一击，为了摆脱一日二充的处境，ratdis只得解锁root了…带来的就是无法保修和没了OTA更新，且为了及时打上安全补丁不得不隔个月就得刷个机…</p><p>但是疏于记录…每次刷都会浪费很多时间，那就简单写下吧</p><p>哦，对了我之前已经解锁了BL锁了，这里就省了</p><h2 id="刷机之前"><a href="#刷机之前" class="headerlink" title="刷机之前"></a>刷机之前</h2><p>备份以及刷机后的操作之前也写过一篇，可以直接拿来用 <a href="https://www.ratdis1.com/2018/11/18/android-backup-and-management/" target="_blank" rel="noopener">Link</a></p><p><strong>记得提前退出谷歌账号</strong></p><h2 id="一堆用的着的散东西"><a href="#一堆用的着的散东西" class="headerlink" title="一堆用的着的散东西"></a>一堆用的着的散东西</h2><p>以下的连接都是给的更新页，所以就不用担心旧版本什么的问题了</p><ul><li><a href="https://xpericheck.com/" target="_blank" rel="noopener">XperiCheck</a>     很方便的查看各区域的固件更新情况</li><li><a href="https://forum.xda-developers.com/crossdevice-dev/sony/pc-xperifirm-xperia-firmware-downloader-t2834142" target="_blank" rel="noopener">XperiFirm</a>        下载固件用的</li><li><a href="http://www.flashtool.net/downloads.php" target="_blank" rel="noopener">Flashtool</a>             我只是用来安装驱动了</li><li><a href="https://forum.xda-developers.com/crossdevice-dev/sony/progress-newflasher-xperia-command-line-t3619426" target="_blank" rel="noopener">Newflasher</a>          强刷命令行工具</li><li><a href="https://forum.xda-developers.com/xperia-xz1/development/recovery-twrp-3-2-1-t3727602/page12" target="_blank" rel="noopener">TWRP</a>                  RECOVERY</li><li><a href="https://github.com/topjohnwu/Magisk/releases" target="_blank" rel="noopener">Magisk</a>                 root权限管理</li><li><a href="https://github.com/shadowsocks/shadowsocks-android/releases" target="_blank" rel="noopener">Shadowsocks</a>      上互联网恢复备份</li><li><a href="https://androidmtk.com/download-minimal-adb-and-fastboot-tool" target="_blank" rel="noopener">Minimal ADB and Fastboot</a>       =。=</li><li><a href="https://github.com/ElderDrivers/EdXposed" target="_blank" rel="noopener">EdXposed</a>            安卓9上也能用的Xposed</li></ul><h2 id="动手惹"><a href="#动手惹" class="headerlink" title="动手惹"></a>动手惹</h2><p>先用<code>XperiFirm</code>下载最新的固件，众所周知的原因，请先设置好代理再下载…</p><blockquote><p>美版固件因为版权问题用不了指纹…亲身踩坑QAQ</p></blockquote><p>下载完后删除<code>simlock</code>文件，再将<code>Newflasher</code>解压到刚刚下好的固件同文件夹下，接着将手机彻底关机后按着音量下键来连接电脑，这样手机会进入绿灯模式，运行<code>Newflasher</code>，按照提示刷机完成即可，一般都是连续输入两次“n”</p><p>之前没有刷过的应该是会缺少驱动出现问题…需要去找<code>Flashtool</code>的安装目录下的 <code>Flashtool-drivers.exe</code>（一般默认安装在 <code>C:\Flashtool\</code>) ，安装蓝 / 绿灯模式必须的两个驱动 <code>Flashmode Drivers</code> 和 <code>Fastboot Drivers</code>（就是第一个和第二个打勾）</p><p>不出意外会出现驱动安装失败…你需要<a href="https://jingyan.baidu.com/article/546ae185d818941148f28c6c.html" target="_blank" rel="noopener">禁用驱动数字签名</a>后再进行安装</p><p>驱动安装好后就可以继续在绿灯模式下用<code>Newflasher</code>强刷系统了</p><p>强刷完系统后开机去开发者模式中打开USB调试后连接电脑，到<code>Minimal ADB and Fastboot</code>安装目录下运行<code>cmd-here.exe</code>并且将之前下载好的<code>TWRP</code> img文件放进来，输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adb devices</span><br><span class="line">adb reboot bootloader</span><br><span class="line">fastboot devices</span><br><span class="line">fastboot flash recovery 放进来的TWRP名字.img</span><br><span class="line">fastboot reboot</span><br></pre></td></tr></table></figure><p>然后就是音量下键加开机键进入<code>recovery</code>刷入<code>Magisk</code></p><p>安装<code>EdXposed</code>之前需要刷好<a href="https://github.com/RikkaApps/Riru/releases" target="_blank" rel="noopener">Riru-core</a>之类的，具体见<a href="https://github.com/ElderDrivers/EdXposed" target="_blank" rel="noopener">EdXposed</a></p><p>这应该是至今最水的一篇了，个人笔记只要自己看懂就行，是吧</p><p>最后秀个式姐壁纸~</p><p><img src="https://i.loli.net/2019/04/07/5caa08206f3c0.jpg" alt="temp-min.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;不是同型号或者是索尼手机的，本文并没有啥参考价值的说&lt;del&gt;水&lt;/del&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写
      
    
    </summary>
    
      <category term="note" scheme="https://ratdis.github.io/categories/note/"/>
    
    
      <category term="android" scheme="https://ratdis.github.io/tags/android/"/>
    
      <category term="sony" scheme="https://ratdis.github.io/tags/sony/"/>
    
      <category term="flash" scheme="https://ratdis.github.io/tags/flash/"/>
    
  </entry>
  
  <entry>
    <title>发生了啥</title>
    <link href="https://ratdis.github.io/2019/03/27/wtf/"/>
    <id>https://ratdis.github.io/2019/03/27/wtf/</id>
    <published>2019-03-27T10:10:40.000Z</published>
    <updated>2019-03-27T10:15:31.300Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>几星期后删除本文，仅通知</p></blockquote><p>达成”欢迎回家”的成就~，几近折腾又肥到<code>hexo</code>啦</p><p>随手上了个备用站 <a href="https://ratdis.github.io/">https://ratdis.github.io/</a></p><p>之所以换只是为了提升访问速度<del>才不是因为主题</del></p><p><img src="https://i.loli.net/2019/03/27/5c9b4b563d50b.png" alt="测的最好的一次速诶"></p><p>因为是静态博客，所以偷懒直接使用了<code>Disqus</code>，<code>Typecho</code>评论导出插件不起作用暂时也没啥法子，抱歉QAQ</p><p>最近很累很累..就这样吧</p><p>另外樱花开了~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;几星期后删除本文，仅通知&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;达成”欢迎回家”的成就~，几近折腾又肥到&lt;code&gt;hexo&lt;/code&gt;啦&lt;/p&gt;
&lt;p&gt;随手上了个备用站 &lt;a href=&quot;https://ratdis.github.io/&quot;
      
    
    </summary>
    
      <category term="web" scheme="https://ratdis.github.io/categories/web/"/>
    
    
      <category term="notice" scheme="https://ratdis.github.io/tags/notice/"/>
    
  </entry>
  
  <entry>
    <title>使用Caddy搭建Typecho</title>
    <link href="https://ratdis.github.io/2019/03/22/use-caddy-build-typecho/"/>
    <id>https://ratdis.github.io/2019/03/22/use-caddy-build-typecho/</id>
    <published>2019-03-22T09:17:17.000Z</published>
    <updated>2019-03-26T14:32:20.179Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>2019-03-11，换成了香港服务器，完善重构一下文章，新增了caddy异常监控脚本</strong></p></blockquote><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>继重装macOS和Android后，Ratdis终于也把自己最不熟悉的服务器给重装了，服务商和主题也换了，特此记录下，以备不时再用=。=，也希望能帮到各位吧</p><p>一直以来，我都是使用Nginx + Mysql的组合，使用Let’s Encrypt的SSL配合脚本自动续期，每次都要折腾不少时间…</p><p>开始之所以去尝试Caddy就是被大佬安利，看上了它操作简单去的，本体更是简单到只有一个文件，用 Go 写的 Web 服务器，配置简洁，能一键开启并续期 HTTPS (Let’s Encrypt)，省事多了啊，官网还有不少插件可以安装，分分钟即可搭建好个博客或者文件管理</p><p>操作系统为<code>Ubuntu 18.04 LTS</code></p><a id="more"></a><h2 id="Typcho下载"><a href="#Typcho下载" class="headerlink" title="Typcho下载"></a>Typcho下载</h2><p>直接上命令，注意路径更改为自己的博客路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir /var/www/blog.ratdis1.com &amp;&amp; cd /var/www/blog.ratdis1.com</span><br><span class="line"><span class="meta">#</span> 下载开发版</span><br><span class="line">wget http://typecho.org/build.tar.gz</span><br><span class="line">tar -zxvf build.tar.gz</span><br><span class="line">cd build</span><br><span class="line">mv * ../</span><br><span class="line">sudo chown -R www-data:www-data /var/www</span><br></pre></td></tr></table></figure><h2 id="安装PHP-7-2和Sqlite-3"><a href="#安装PHP-7-2和Sqlite-3" class="headerlink" title="安装PHP 7.2和Sqlite 3"></a>安装PHP 7.2和Sqlite 3</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>更新系统</span><br><span class="line">apt-get update -y</span><br><span class="line"><span class="meta">#</span>安装PHP 7和Sqlite 3</span><br><span class="line">apt-get install php7.2-cgi php7.2-fpm php7.2-curl php7.2-gd php7.2-mbstring php7.2-xml php7.2-sqlite3 sqlite3 -y</span><br></pre></td></tr></table></figure><h2 id="Caddy"><a href="#Caddy" class="headerlink" title="Caddy"></a>Caddy</h2><h3 id="Caddy下载安装"><a href="#Caddy下载安装" class="headerlink" title="Caddy下载安装"></a>Caddy下载安装</h3><p>在<a href="https://caddyserver.com/download" target="_blank" rel="noopener">官网</a>记下你要使用到的插件名字，然后添加到下面的代码末尾运行安装即可</p><p>Ratdis这里搭建博客只用到了<code>http.cache</code>和<code>http.expires</code>插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">curl https://getcaddy.com | bash -s personal</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 例如我要使用到http.cache和http.expires的插件，运行</span><br><span class="line">curl https://getcaddy.com | bash -s personal http.cache,http.expires</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 安装后可以使用caddy -plugins来查看自己已安装的插件列表</span><br><span class="line"><span class="meta">#</span> 如果安装后又想加个插件时重新运行以上命令添加新插件名称至末尾</span><br></pre></td></tr></table></figure><p>安装完成后，使用<code>which caddy</code>应该就会显示<code>/usr/local/bin/caddy</code>了</p><h3 id="Caddy配置文件-Caddyfile"><a href="#Caddy配置文件-Caddyfile" class="headerlink" title="Caddy配置文件(Caddyfile)"></a>Caddy配置文件(Caddyfile)</h3><p><strong>请直接参考<a href="https://doctoralien.gitbooks.io/caddyserver/caddyfilepei-zhi-wen-jian.html" target="_blank" rel="noopener">这里</a>和<a href="https://caddyserver.com/docs" target="_blank" rel="noopener">官方文档</a>!!!</strong></p><p>以下是我的配置，如果你是按照我上面的操作的话，大概只需要更改为自己的路径和域名，以及邮箱</p><p>保存为<code>/etc/caddy/Caddyfile</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># 改！ 域名或者IP</span><br><span class="line">ratdis1.com, www.ratdis1.com &#123;</span><br><span class="line"># 改！ 域名或者IP</span><br><span class="line">    redir https://www.ratdis1.com&#123;url&#125;</span><br><span class="line">&#125;</span><br><span class="line"># 改！ 域名或者IP</span><br><span class="line">https://www.ratdis1.com, https://blog.ratdis1.com &#123;</span><br><span class="line">    # 改！如果不需要记录log也可以直接删掉这一行</span><br><span class="line">    log / /var/log/caddy/blog.ratdis1.com.log &quot;&#123;remote&#125; &#123;when&#125; &#123;method&#125; &#123;uri&#125; &#123;proto&#125; &#123;status&#125; &#123;size&#125; &#123;&gt;User-Agent&#125; &#123;latency&#125;&quot;</span><br><span class="line">cache</span><br><span class="line">    gzip &#123;</span><br><span class="line">        level 4</span><br><span class="line">    &#125;</span><br><span class="line">    # 改！</span><br><span class="line">    tls admin@ratdis1.com</span><br><span class="line">    header / Strict-Transport-Security &quot;max-age=31536000&quot;</span><br><span class="line">    expires &#123;</span><br><span class="line">         match .css$ 1m</span><br><span class="line">         match .js$ 1m</span><br><span class="line">         match .png$ 1m</span><br><span class="line">         match .jpg$ 1m</span><br><span class="line">    &#125;</span><br><span class="line">    # 改！</span><br><span class="line">    root /var/www/blog.ratdis1.com</span><br><span class="line">    fastcgi / /run/php/php7.2-fpm.sock php</span><br><span class="line">    rewrite &#123;</span><br><span class="line">        if &#123;path&#125; not_match ^\/admin</span><br><span class="line">        to &#123;path&#125; &#123;path&#125;/ /index.php?&#123;query&#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中使用到的<code>cache</code>需要提前安装好<code>http.cache</code>插件，<code>expires</code>也需要<code>http.expires</code>插件</p><p>log文件需要自己手动创建好<code>vim /var/log/caddy/blog.ratdis1.com.log</code>，随便写点保存后，给权限<code>chown www-data:www-data /var/log/caddy/blog.ratdis1.com.log</code>,再<code>systemctl reload caddy.service</code>重载配置文件</p><h3 id="Caddy开机自启"><a href="#Caddy开机自启" class="headerlink" title="Caddy开机自启"></a>Caddy开机自启</h3><p>这里我们选择使用<code>systemd</code>实现</p><p>先去下载官方提供的<a href="https://github.com/mholt/caddy/blob/master/dist/init/linux-systemd/caddy.service" target="_blank" rel="noopener">caddy.service</a>到/etc/systemd/system/</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -s https://raw.githubusercontent.com/mholt/caddy/master/dist/init/linux-systemd/caddy.service -o /etc/systemd/system/caddy.service</span><br></pre></td></tr></table></figure><p>脚本里面用到了几个文件和文件夹需要我们自己手动创建，当然你也可以自己更改目录</p><p><code>/etc/caddy</code> 放 Caddy 的配置文件，<code>/etc/ssl/caddy</code> 放证书，<code>/var/www</code> 是默认的网站目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /etc/caddy /etc/ssl/caddy /var/www</span><br><span class="line">sudo chown -R root:www-data /etc/caddy</span><br><span class="line">sudo chown -R www-data:root /etc/ssl/caddy</span><br><span class="line">sudo chown www-data:www-data /var/www</span><br><span class="line">sudo chmod 0770 /etc/ssl/caddy</span><br><span class="line">sudo touch /etc/caddy/Caddyfile</span><br></pre></td></tr></table></figure><p>让 Caddy 开机自启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl enable caddy.service</span><br></pre></td></tr></table></figure><p>接着可以重启运行<code>ps -ef | grep caddy</code>看看是否是否起作用</p><p>如果没有使用<code>systemctl status caddy.service</code>查看报错，一般都是什么文件权限之类的小问题</p><p><code>Caddy</code>的部分到此为止了，接下来就是紧张刺激的安装<code>Typecho</code>了</p><p>然后浏览器打开你的域名/IP，不出意外就会见到Typecho的安装界面了，简单设置几个密码后，博客就搭建好了</p><h2 id="脚本监控caddy"><a href="#脚本监控caddy" class="headerlink" title="脚本监控caddy"></a>脚本监控caddy</h2><p>之前遇到过几次caddy挂了的情况，手动重启一下就好了，但是这事还是扔给脚本去做吧~</p><p>以下脚本可以直接套用，只要把21行中的域名改成自己的即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line">host_dir=<span class="string">"/root/"</span>                                       <span class="comment"># 当前用户根目录</span></span><br><span class="line">proc_name=<span class="string">"caddy"</span>                                       <span class="comment"># 进程名</span></span><br><span class="line">file_name=<span class="string">"restart_caddy.log"</span>               <span class="comment"># 日志文件</span></span><br><span class="line">pid=0</span><br><span class="line"></span><br><span class="line">proc_num()                                              <span class="comment"># 计算进程数</span></span><br><span class="line">&#123;</span><br><span class="line">    num=`ps -ef | grep <span class="variable">$proc_name</span> | grep -v grep | wc -l`</span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$num</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">proc_id()                                               <span class="comment"># 进程号</span></span><br><span class="line">&#123;</span><br><span class="line">    pid=`ps -ef | grep <span class="variable">$proc_name</span> | grep -v grep | awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 通过curl模拟登录获取http_code,模拟登录参数仅供参考</span></span><br><span class="line"><span class="comment"># 如果只需要判断某页面的状态可使用curl -I -s -w "%&#123;http_code&#125;" -o /dev/null http://www.baidu.com/ 直接获取即可</span></span><br><span class="line"><span class="comment"># http_code=`curl -I -s -w "%&#123;http_code&#125;" -o -d "userKey=admin&amp;pass=c9127e832b41a" /dev/null  http://portal.ly-sky.com/login.do?login= | head -n 1 | cut -d$' ' -f2`</span></span><br><span class="line">http_code=`curl -I -s -w <span class="string">"%&#123;http_code&#125;"</span> -o /dev/null https://www.ratdis1.com/`</span><br><span class="line"></span><br><span class="line">proc_num</span><br><span class="line">number=$?</span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$number</span> -eq 0 ]]||[[ <span class="variable">$http_code</span> -ne 200 ]] <span class="comment"># 判断进程是否存在,页面状态是否是200</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="comment"># nohup ./run.sh&gt;../logs/urp.log 2&gt;&amp;1 &amp;    # 重启进程的命令，请相应修改</span></span><br><span class="line">    <span class="comment"># nohup /usr/local/bin/caddy -log stdout -agree=true -conf=/etc/caddy/Caddyfile -root=/var/tmp -quic &amp;</span></span><br><span class="line">    systemctl restart caddy.service</span><br><span class="line">    sleep 3                                  <span class="comment">#延迟3秒是为了确保进程已正常启动并方便获取pid，否则有可能获取不到pid</span></span><br><span class="line">proc_id                                         <span class="comment"># 获取新进程号</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$pid</span>, `date` &gt;&gt; <span class="variable">$host_dir</span><span class="variable">$file_name</span>     <span class="comment"># 将新进程号和重启时间记录</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>记得给运行权限<code>chmod 700 monitor_caddy.sh</code></p><p>手动测试监控是否正常，运行<code>systemctl stop caddy.service</code>后再使用<code>./monitor_caddy.sh</code>，查看<code>restart_caddy.log</code></p><p>接着使用<code>crontab</code>每5分钟运行一次脚本</p><p>使用<code>crontab -e</code>加入一行<code>*/5 * * * * /root/monitor_caddy.sh</code></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>Caddy</code>的配置的确很简单，配合<code>PHP 7.2</code>和<code>Sqlite 3</code>总共占的内存比使用<code>Nginx+PHP 7.2+Mysql</code>小了不少，性能差距Ratdis也没有感觉有啥差，吹爆~</p><p>参考资料：<a href="https://my.oschina.net/u/3009151/blog/834946" target="_blank" rel="noopener">1</a> <a href="https://www.giuem.com/caddy-tutorial-for-debian/" target="_blank" rel="noopener">2</a> <a href="https://liuzhichao.com/2018/caddy/" target="_blank" rel="noopener">3</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;2019-03-11，换成了香港服务器，完善重构一下文章，新增了caddy异常监控脚本&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;继重装macOS和Android后，Ratdis终于也把自己最不熟悉的服务器给重装了，服务商和主题也换了，特此记录下，以备不时再用=。=，也希望能帮到各位吧&lt;/p&gt;
&lt;p&gt;一直以来，我都是使用Nginx + Mysql的组合，使用Let’s Encrypt的SSL配合脚本自动续期，每次都要折腾不少时间…&lt;/p&gt;
&lt;p&gt;开始之所以去尝试Caddy就是被大佬安利，看上了它操作简单去的，本体更是简单到只有一个文件，用 Go 写的 Web 服务器，配置简洁，能一键开启并续期 HTTPS (Let’s Encrypt)，省事多了啊，官网还有不少插件可以安装，分分钟即可搭建好个博客或者文件管理&lt;/p&gt;
&lt;p&gt;操作系统为&lt;code&gt;Ubuntu 18.04 LTS&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="https://ratdis.github.io/categories/web/"/>
    
    
      <category term="caddy" scheme="https://ratdis.github.io/tags/caddy/"/>
    
      <category term="typecho" scheme="https://ratdis.github.io/tags/typecho/"/>
    
  </entry>
  
  <entry>
    <title>论作业</title>
    <link href="https://ratdis.github.io/2019/03/01/view-of-homework/"/>
    <id>https://ratdis.github.io/2019/03/01/view-of-homework/</id>
    <published>2019-03-01T09:17:17.000Z</published>
    <updated>2019-03-26T14:30:55.397Z</updated>
    
    <content type="html"><![CDATA[<p>  时隔多日，在家闲来无事的我又一次的提笔了，越是临近开学，越是感到一种压迫感，大概是一种没有好好把握住假期的愧疚，偏离了假期最初的期望，仔细想想，原因之一是没有作业，  与其说是作业不妨说成目标或任务，具有明确限定日期，并伴随着不可知的失败后果的那种</p><p>  就我所接触的大学生人群中，大部分学生都是无法<strong>独立</strong>的好好利用长假期的，更多的是无所事事的度过假期，常常感到无聊，这并不是说这假期过起来并无意义，只是在强调作业在假期中的作用，所以游戏假期也好，打工假期也罢，只不过是生活方式的不同而已，将自己的生活观强加于人是不应该的</p><p> 上面之所以说的是独立的利用长假期，是因为如果在集体中的话，通常就会有类似于作业效果的东西，不论是不想显得特殊的心理，还是没有按时完成可能会被辞退的现实，游戏·打工可以说都有着各自的“作业”</p><p>  很多人会在假期前定好假期目标，但是如果是自我监督的那种，完成目标的人应该不多，都说最大的敌人是自己，自己往往是对自己下不了手的，不是所有人都可以完成自我监督的，自制力什么的或多或少都会被如今宽松的大学环境给磨了个洞，再加上身边各种各样的诱惑，独立的实现作业效果是越来越难了，除了这些，懒也是主要原因</p><p>  我们都有着对未知的好奇心，唯一区别就是在行动上，大学之前有着数不尽的作业告诉着我们怎么走，苦不堪言，到了大学突然没了作业，刚开始欣喜不已，随后恍恍惚惚，有的不停寻找，有的顺其自然，有的一顿乱写</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  时隔多日，在家闲来无事的我又一次的提笔了，越是临近开学，越是感到一种压迫感，大概是一种没有好好把握住假期的愧疚，偏离了假期最初的期望，仔细想想，原因之一是没有作业，  与其说是作业不妨说成目标或任务，具有明确限定日期，并伴随着不可知的失败后果的那种&lt;/p&gt;
&lt;p&gt;  就
      
    
    </summary>
    
      <category term="view" scheme="https://ratdis.github.io/categories/view/"/>
    
    
      <category term="chatting" scheme="https://ratdis.github.io/tags/chatting/"/>
    
  </entry>
  
  <entry>
    <title>用Python写个小Bot</title>
    <link href="https://ratdis.github.io/2019/01/19/creat-a-telegram-bot-with-python/"/>
    <id>https://ratdis.github.io/2019/01/19/creat-a-telegram-bot-with-python/</id>
    <published>2019-01-19T09:17:17.000Z</published>
    <updated>2019-03-26T14:32:02.850Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>正如你所看到的，这篇文章我们来学习一下用Python玩下Telegram中的Bot吧</p><p>实现一个实时查询服务器CPU利用率的Bot</p><blockquote><p>Wikipedia:</p><p><strong>Telegram</strong>是一个跨平台的即时通信软件，它的客户端是自由及开放源代码软件，但是它的服务器是专有软件。用户可以相互交换加密与自析构的消息，发送照片、影片等所有类型文件。官方提供手机版（Android、iOS、Windows Phone）、桌面版（Windows、macOS、Linux）和网页版等多种平台客户端；同时官方开放应用程序接口，因此拥有许多第三方的客户端可供选择，其中多款内置中文。</p></blockquote><p>Ratdis的主力即时通讯软件，个人瞎说频道 : <a href="https://t.me/xia_shuo" target="_blank" rel="noopener">链接</a></p><p>在这篇文章中我们使用<code>Python3</code></p><h2 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h2><h3 id="使用virtual-environment"><a href="#使用virtual-environment" class="headerlink" title="使用virtual environment"></a>使用virtual environment</h3><p>项目使用virtual environment可是个好习惯，为什么要使用这玩意呢</p><p>你可以简单的认为<code>virtual environment</code>是一个没有安装任何第三方库的<code>Python</code>环境，当我们写完一个项目打算分享给其他人的时候就需要告诉他这个项目用了那些第三方库，如果使用了<code>virtual environment</code>就可以很方便的找全所有使用到的第三方库了（导出方法见下文）</p><h4 id="本地使用"><a href="#本地使用" class="headerlink" title="本地使用"></a>本地使用</h4><p>在Pycharm中创建项目时候默认就是使用的virtual environment了</p><p>不用Pycharm的话，(Linux&amp;Mac)操作和服务器端是一样的</p><h4 id="服务器端使用"><a href="#服务器端使用" class="headerlink" title="服务器端使用"></a>服务器端使用</h4><p>先使用pip安装好virtualenv</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install virtualenv</span><br></pre></td></tr></table></figure><p>如果没有安装pip的，先安装pip</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python3-pip</span><br></pre></td></tr></table></figure><p>创建你将要使用到的项目文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir TGbot</span><br><span class="line">cd TGbot</span><br></pre></td></tr></table></figure><p>创建一个名为<code>venv</code>的python运行环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtualenv --no-site-packages venv</span><br></pre></td></tr></table></figure><p>接着使用<code>source</code>进入<code>venv</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source venv/bin/activate</span><br></pre></td></tr></table></figure><p>不出意外的话，命令提示符最前面会多一个(venv)</p><h4 id="导出项目模块依赖以及安装"><a href="#导出项目模块依赖以及安装" class="headerlink" title="导出项目模块依赖以及安装"></a>导出项目模块依赖以及安装</h4><p>当你写好一个项目打算给他人使用时可以使用以下命令将项目所用到的所有模块依赖导出到requirements.txt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure><p>这样别人就可以直接这样安装使用啦</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install -r requirements.txt</span><br></pre></td></tr></table></figure><h3 id="安装好将要使用到的模块"><a href="#安装好将要使用到的模块" class="headerlink" title="安装好将要使用到的模块"></a>安装好将要使用到的模块</h3><p>在Pycharm中 Preferences搜索interpreter后，点加号搜索模块名称即可安装</p><p><img src="https://www.ratdis1.com/usr/uploads/2019/01/3127646363.png" alt="Screen Shot 2019-01-12 at 2.48.35 PM-min.png"></p><p>我们需要用到的模块有 <code>python-telegram-bot</code>(Telegram API)，<code>ruamel.yaml</code>(处理yaml配置文件的)，<code>psutil</code>（跨平台获取系统信息）</p><p>也可以直接在终端中使用安装所有</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install python-telegram-bot psutil ruamel.yaml</span><br></pre></td></tr></table></figure><h2 id="Telegram中的Bot介绍"><a href="#Telegram中的Bot介绍" class="headerlink" title="Telegram中的Bot介绍"></a>Telegram中的Bot介绍</h2><blockquote><h3 id="How-are-bots-different-from-humans"><a href="#How-are-bots-different-from-humans" class="headerlink" title="How are bots different from humans?"></a>How are bots different from humans?</h3><ul><li>Bots have no online status and no last seen timestamps, the interface shows the label <strong>‘bot’</strong> instead.</li><li>Bots have limited cloud storage — older messages may be removed by the server shortly after they have been processed.</li><li>Bots can’t initiate conversations with users. A user <strong>must</strong> either add them to a group or send them a message first. People can use <code>telegram.me/&lt;bot_username&gt;</code> links or username search to find your bot.</li><li>Bot usernames always end in ‘bot’ (e.g. <a href="https://telegram.me/triviabot" target="_blank" rel="noopener">@TriviaBot</a>, <a href="https://telegram.me/githubbot" target="_blank" rel="noopener">@GitHub_bot</a>).</li><li>When added to a group, bots do not receive all messages by default (see <a href="https://core.telegram.org/bots#privacy-mode" target="_blank" rel="noopener">Privacy mode</a>).</li><li><strong>Bots never eat, sleep or complain (unless expressly programmed otherwise).</strong></li></ul></blockquote><p>总之bot与真人最大差距就是没有在线状态，不能主动聊天加群以及名字结尾必须为bot，真人能做的几乎都能做，还有一些特有的功能，具体还是见<a href="https://core.telegram.org/bots" target="_blank" rel="noopener">官方介绍</a>吧</p><h2 id="和Botfather签订契约成为马猴烧酒Bot吧（不"><a href="#和Botfather签订契约成为马猴烧酒Bot吧（不" class="headerlink" title="和Botfather签订契约成为马猴烧酒Bot吧（不"></a>和Botfather签订契约成为马猴烧酒Bot吧（不</h2><blockquote><h3 id="How-do-I-create-a-bot"><a href="#How-do-I-create-a-bot" class="headerlink" title="How do I create a bot?"></a>How do I create a bot?</h3><p>There’s a… bot for that. Just talk to <a href="https://telegram.me/botfather" target="_blank" rel="noopener">BotFather</a> (described <a href="https://core.telegram.org/bots#6-botfather" target="_blank" rel="noopener">below</a>) and follow a few simple steps. Once you’ve created a bot and received your authorization token, head down to the <a href="https://core.telegram.org/bots/api" target="_blank" rel="noopener">Bot API manual</a> to see what you can teach your bot to do.</p></blockquote><p><del>就知道贴官网介绍，要你何用</del></p><p>跟着<a href="https://telegram.me/botfather" target="_blank" rel="noopener">BotFather</a>一顿操作就完事了</p><p>注意不要泄漏token</p><h2 id="开始吧！"><a href="#开始吧！" class="headerlink" title="开始吧！"></a>开始吧！</h2><h3 id="使用yaml处理类似于TOKEN的个人配置"><a href="#使用yaml处理类似于TOKEN的个人配置" class="headerlink" title="使用yaml处理类似于TOKEN的个人配置"></a>使用yaml处理类似于TOKEN的个人配置</h3><p>如果想让代码能够很快的为他人所用，在配置方面就应该单独的设立一个文件，可以是<code>yaml</code>也可以是<code>json</code>，这两种配置文件在<code>Python</code>中都有很好用的模块，这里我们就来使用<code>yaml</code>作为配置文件格式吧<del>（<code>json</code>中花括号太多，看着难受</del></p><p>由于Ratdis也是首次用到<code>yaml</code>，上<a href="https://yaml.org/" target="_blank" rel="noopener">官网</a>找到Python的模块，选了个支持最新<code>yaml</code>1.2的<a href="https://pypi.org/project/ruamel.yaml/" target="_blank" rel="noopener">ruamel.ymal</a>用着了</p><blockquote><h1 id="ruamel-yaml-Examples"><a href="#ruamel-yaml-Examples" class="headerlink" title="ruamel.yaml Examples"></a>ruamel.yaml Examples</h1><p>Basic round trip of parsing YAML to Python objects, modifying and generating YAML:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">import</span> sys</span><br><span class="line">&gt; <span class="keyword">from</span> ruamel.yaml <span class="keyword">import</span> YAML</span><br><span class="line">&gt; </span><br><span class="line">&gt; inp = <span class="string">"""\</span></span><br><span class="line"><span class="string">&gt; # example</span></span><br><span class="line"><span class="string">&gt; name:</span></span><br><span class="line"><span class="string">&gt; # details</span></span><br><span class="line"><span class="string">&gt; family: Smith   # very common</span></span><br><span class="line"><span class="string">&gt; given: Alice    # one of the siblings</span></span><br><span class="line"><span class="string">&gt; """</span></span><br><span class="line">&gt; </span><br><span class="line">&gt; yaml = YAML()</span><br><span class="line">&gt; code = yaml.load(inp)</span><br><span class="line">&gt; code[<span class="string">'name'</span>][<span class="string">'given'</span>] = <span class="string">'Bob'</span></span><br><span class="line">&gt; </span><br><span class="line">&gt; yaml.dump(code, sys.stdout)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>Resulting in:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&gt; # example</span></span><br><span class="line"><span class="string">&gt; name:</span></span><br><span class="line"><span class="string">&gt; # details</span></span><br><span class="line"><span class="string">&gt; family: Smith   # very common</span></span><br><span class="line"><span class="string">&gt; given: Bob      # one of the siblings</span></span><br><span class="line"><span class="string">&gt;</span></span><br></pre></td></tr></table></figure></blockquote><p>想了解更多参考<a href="https://yaml.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener">ruamel.yaml文档</a></p><p><del>其实只有一点配置也可以直接用系统的环境变量更方便…硬编码也不是不可以接受emmm</del></p><p>也算是学习了一种使用配置文件的方法吧</p><p>先在<code>config.yaml</code>里面写入</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config.yaml</span></span><br><span class="line"><span class="attr">token:</span> <span class="string">你自己的token</span></span><br></pre></td></tr></table></figure><h3 id="大致流程"><a href="#大致流程" class="headerlink" title="大致流程"></a>大致流程</h3><h4 id="首先自然是导入各种模块啦"><a href="#首先自然是导入各种模块啦" class="headerlink" title="首先自然是导入各种模块啦"></a>首先自然是导入各种模块啦</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="keyword">from</span> telegram.ext <span class="keyword">import</span> Updater, CommandHandler</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> ruamel.yaml <span class="keyword">import</span> YAML</span><br><span class="line"><span class="keyword">import</span> psutil</span><br></pre></td></tr></table></figure><h4 id="Updater和Dispatcher"><a href="#Updater和Dispatcher" class="headerlink" title="Updater和Dispatcher"></a>Updater和Dispatcher</h4><p>接着我们需要两个类相互配合来完成bot的运作</p><p>一个<code>Updater</code>，另一个<code>Dispatcher</code></p><p>前者不断的接受来自Telegram的信息并且将这些传递到<code>Dispatcher</code>，当你创建好一个<code>Updater</code>后会自动也会创建好同属于一个队列的<code>Dispatcher</code></p><p>在<code>Dispatcher</code>中我们可以注册各种<code>handler</code>，这样<code>Updater</code>中的数据就会被<code>handler</code>所处理，并且将处理后的信息传递给你所指定的回调函数中去</p><p>所以我们这样就先读取配置文件中的<code>token</code>，并且在本地上使用代理，创建好<code>Updater</code>和<code>Dispatcher</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="comment"># 读取config.yaml配置文件</span></span><br><span class="line">yaml = YAML()</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'config.yaml'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    config = yaml.load(f)</span><br><span class="line"></span><br><span class="line">TOKEN = config[<span class="string">'token'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地使用http代理,国外服务器可以不用设置</span></span><br><span class="line">REQUEST_KWARGS = &#123;</span><br><span class="line">    <span class="string">'proxy_url'</span>: <span class="string">'http://127.0.0.1:1087'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">updater = Updater(TOKEN, request_kwargs=REQUEST_KWARGS)</span><br><span class="line">dispatcher = updater.dispatcher</span><br></pre></td></tr></table></figure><p>为了知道在此运行中出现了什么错误，我们在这里使用<code>logging</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 错误调试</span></span><br><span class="line">logging.basicConfig(format=<span class="string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span>,</span><br><span class="line">                    level=logging.INFO)</span><br></pre></td></tr></table></figure><p>日常我们也可以从<code>print</code>转向<code>logging</code>来处理错误信息，<a href="https://cuiqingcai.com/6080.html" target="_blank" rel="noopener">这篇文章</a>具体的介绍了下<code>logging</code></p><h4 id="编写并注册回调函数"><a href="#编写并注册回调函数" class="headerlink" title="编写并注册回调函数"></a>编写并注册回调函数</h4><p>我们先来简单写个打招呼的，为了测试以上的操作是否无误</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(bot, update)</span>:</span></span><br><span class="line">    bot.send_message(chat_id=update.message.chat_id, text=<span class="string">"I'm a bot"</span>)</span><br></pre></td></tr></table></figure><p>这个bot类型就是<code>telegram.Bot</code>，里面的各种函数参见<a href="https://python-telegram-bot.readthedocs.io/en/latest/telegram.bot.html?highlight=end_message#" target="_blank" rel="noopener">官方文档</a></p><p>有关send_message还是看<a href="https://core.telegram.org/bots/api#sendmessage" target="_blank" rel="noopener">文档</a>去吧</p><p>注册个<code>handler</code>将<code>start</code>设为回调函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">start_handler = CommandHandler(<span class="string">'start'</span>, start)</span><br><span class="line">dispatcher.add_handler(start_handler)</span><br></pre></td></tr></table></figure><p>这样写就代表当向机器人发送<code>/start</code>式就会调用start函数了</p><p>如果我们需要有命令参数怎么办呢，可以使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dispatcher.add_handler(CommandHandler(<span class="string">'start'</span>, start,pass_args=<span class="literal">True</span>))</span><br></pre></td></tr></table></figure><p><code>start</code>函数也需要添加个<code>agrs</code>参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(bot, update, args)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> args:</span><br><span class="line">        bot.send_message(chat_id=update.message.chat_id, text=<span class="string">"Hi &#123;&#125;, I'm a bot"</span>.format(args[<span class="number">0</span>]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        bot.send_message(chat_id=update.message.chat_id, text=<span class="string">"Hi , I'm a bot"</span>)</span><br></pre></td></tr></table></figure><p>一切都准备好后最后一行用来启动bot</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">updater.start_polling()</span><br></pre></td></tr></table></figure><p>这样当我们使用<code>/start ratdis</code>时就会回复<code>Hi ratdis, I&#39;m a bot</code>啦</p><h4 id="来张嘴，吃下这颗语法糖吧-装饰器"><a href="#来张嘴，吃下这颗语法糖吧-装饰器" class="headerlink" title="来张嘴，吃下这颗语法糖吧(装饰器)"></a>来张嘴，吃下这颗语法糖吧(装饰器)</h4><p>每次都要先创建个handler再add_handler</p><p>我们可以使用装饰器来优化一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里我们用个装饰器来避免每个命令都需要手动注册</span></span><br><span class="line"><span class="comment"># 默认不接受命令参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">command</span><span class="params">(handler, cmd, pass_args=False, **kw)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorater</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> pass_args:</span><br><span class="line">            func_hander = handler(cmd, func, pass_args=<span class="literal">True</span>, **kw)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            func_hander = handler(cmd, func, **kw)</span><br><span class="line">        dispatcher.add_handler(func_hander)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decorater</span><br></pre></td></tr></table></figure><p>这样我们只要在<code>start</code>函数之前加一行就完成了注册</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@command(CommandHandler, 'start', pass_args=True)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(bot, update, args)</span>:</span></span><br><span class="line">    ......</span><br></pre></td></tr></table></figure><p>一篇不错的装饰器介绍<a href="https://foofish.net/python-decorator.html" target="_blank" rel="noopener">文章</a></p><h4 id="使用psutil获取服务器运行信息"><a href="#使用psutil获取服务器运行信息" class="headerlink" title="使用psutil获取服务器运行信息"></a>使用psutil获取服务器运行信息</h4><p>这里我们就以获取CPU利用率为例吧</p><p>在这里我们使用了<code>config.yaml</code>中<code>cpu_check_times</code>和<code>cpu_check_interval</code></p><p>所以先将<code>config.yaml</code>改成</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">token:</span> <span class="string">你自己的token</span></span><br><span class="line"><span class="attr">cpu:</span></span><br><span class="line">  <span class="comment"># 检测CPU利用率的次数</span></span><br><span class="line"><span class="attr">  cpu_check_times:</span> <span class="number">5</span></span><br><span class="line">  <span class="comment"># 检测CPU利用率的间隔(单位为秒)</span></span><br><span class="line"><span class="attr">  cpu_check_interval:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p><code>server</code>函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@command(CommandHandler, 'server')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">server</span><span class="params">(bot, update)</span>:</span></span><br><span class="line">    <span class="comment"># 检测CPU利用率的次数</span></span><br><span class="line">    CPU_CHECK_TIMES = config[<span class="string">'cpu'</span>][<span class="string">'cpu_check_times'</span>]</span><br><span class="line">    <span class="comment"># 检测CPU利用率的间隔(单位为秒)</span></span><br><span class="line">    CPU_CHECK_INTERVAL = config[<span class="string">'cpu'</span>][<span class="string">'cpu_check_interval'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 用来保存每次检测CPU利用率的结果</span></span><br><span class="line">    cpu_check_list = [<span class="number">0</span>] * psutil.cpu_count()</span><br><span class="line">    result = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> CPU_CHECK_TIMES:</span><br><span class="line">        <span class="comment"># 检测逻辑CPU的占用率,将结果元素相加到cpu_check_list中</span></span><br><span class="line">        cpu_check_list = [a + b <span class="keyword">for</span> a, b <span class="keyword">in</span></span><br><span class="line">                          zip(psutil.cpu_percent(interval=CPU_CHECK_INTERVAL, percpu=<span class="literal">True</span>), cpu_check_list)]</span><br><span class="line">        CPU_CHECK_TIMES -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将相加结果取平均值并且转化为百分比%格式</span></span><br><span class="line">    cpu_check_list = [<span class="string">'&#123;:.2f&#125;%'</span>.format(float(x / <span class="number">10</span>)) <span class="keyword">for</span> x <span class="keyword">in</span> cpu_check_list]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> num, l <span class="keyword">in</span> enumerate(cpu_check_list):</span><br><span class="line">        result += <span class="string">"CPU&#123;&#125;平均占用&#123;&#125;\n"</span>.format(num + <span class="number">1</span>, l)</span><br><span class="line"></span><br><span class="line">    bot.send_message(chat_id=update.message.chat_id, text=result)</span><br></pre></td></tr></table></figure><p>这样的话，当我们输入<code>/server</code>时就会回复类似于这样的</p><blockquote><p>CPU1平均占用22.02%<br>CPU2平均占用11.65%<br>CPU3平均占用19.95%<br>CPU4平均占用11.09%</p></blockquote><p>当然psutil还提供了很多好用的函数来获取各种个样的服务器运行信息，<a href="https://psutil.readthedocs.io/en/latest/" target="_blank" rel="noopener">psutil文档</a></p><h2 id="本地上线到服务器"><a href="#本地上线到服务器" class="headerlink" title="本地上线到服务器"></a>本地上线到服务器</h2><p>取消代理(国外服务器)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本地使用http代理</span></span><br><span class="line"><span class="comment">#REQUEST_KWARGS = &#123;</span></span><br><span class="line"><span class="comment">#    'proxy_url': 'http://127.0.0.1:1087',</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#updater = Updater(TOKEN, request_kwargs=REQUEST_KWARGS)</span></span><br><span class="line">updater = Updater(TOKEN)</span><br></pre></td></tr></table></figure><p>由于我们一直都是后台运行，所以需要将错误信息输出到到log文件中去，修改一下logging的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  错误调试</span></span><br><span class="line">logging.basicConfig(level=logging.INFO,</span><br><span class="line">                    filename=<span class="string">'TGbot.log'</span>,</span><br><span class="line">                    datefmt=<span class="string">'%Y/%m/%d %H:%M:%S'</span>,</span><br><span class="line">                    format=<span class="string">'%(asctime)s - %(name)s - %(levelname)s - %(lineno)d - %(module)s - %(message)s'</span>)</span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line"><span class="comment"># logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',</span></span><br><span class="line"><span class="comment">#                     level=logging.INFO)</span></span><br></pre></td></tr></table></figure><p>这样出错信息就可以去<code>TGbot.log</code>中去看了</p><p>最后使用<code>nohup</code>一直在后台运行就好啦</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup python3 main.py</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这次简单的写了一点关于bot的东西，还有很多特性都没有怎么说，想进一步了解的完全可以去看文档</p><p>这个监控bot也有很大的进步空间，大家完全可以做个全面的服务器监控Bot出来</p><p>利用好bot的方便性，可以很好的管理服务器，甚至是推送各类消息，推出付费功能之类的</p><h2 id="接下来的几个月打算"><a href="#接下来的几个月打算" class="headerlink" title="接下来的几个月打算"></a>接下来的几个月打算</h2><p>应该会有一段较长的时间不更新博文了，好好利用下假期写点小玩意，嗯，就这样吧</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;正如你所看到的，这篇文章我们来学习一下用Python玩下Telegram中的Bot吧&lt;/p&gt;
&lt;p&gt;实现一个实时查询服务器C
      
    
    </summary>
    
      <category term="program" scheme="https://ratdis.github.io/categories/program/"/>
    
    
      <category term="python" scheme="https://ratdis.github.io/tags/python/"/>
    
      <category term="telegram" scheme="https://ratdis.github.io/tags/telegram/"/>
    
  </entry>
  
  <entry>
    <title>算法笔记 壹</title>
    <link href="https://ratdis.github.io/2018/12/18/algorithm-note-1/"/>
    <id>https://ratdis.github.io/2018/12/18/algorithm-note-1/</id>
    <published>2018-12-18T09:17:17.000Z</published>
    <updated>2019-03-26T14:30:29.711Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>以后会陆陆续续写一些关于算法的笔记，欢迎交流学习</p><p>学习视频<a href="https://bt.byr.cn/details.php?id=116211&amp;hit=1" target="_blank" rel="noopener">下载</a>(北邮人BT，需IPV6访问)</p><p>C语言描述</p><h2 id="递推算法"><a href="#递推算法" class="headerlink" title="递推算法"></a>递推算法</h2><h3 id="顺推法"><a href="#顺推法" class="headerlink" title="顺推法"></a>顺推法</h3><blockquote><p>从已知条件出发，推出最后结果</p></blockquote><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>一对兔子，从出生后第3个月起每个月都生一对兔子。小兔子长到第3个月后立马生一对且以后每个月又生一对兔子。假如兔子都不死，第一个月有一对一个月大的兔子，请算出12月初时一共有多少对兔子？</p><h4 id="思路分析-amp-实现代码"><a href="#思路分析-amp-实现代码" class="headerlink" title="思路分析&amp;实现代码"></a>思路分析&amp;实现代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MONTHS 13</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num[MONTHS]=&#123;<span class="number">0</span>,<span class="number">1</span>&#125;;<span class="comment">//记录MONTHS月的兔子对数num[1]指第一个月的兔子总对数，以此类推</span></span><br><span class="line"><span class="keyword">int</span> grow[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>&#125;;<span class="comment">//记录每种生长程度的兔子对数grow[1]指一个月大的对数，以此类推</span></span><br><span class="line"><span class="keyword">int</span> <span class="keyword">new</span>;<span class="comment">//该月新增的兔子对数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; MONTHS; i++)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">//兔子对数和生长程度变化</span></span><br><span class="line">grow[<span class="number">3</span>] += grow[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">new</span> = grow[<span class="number">3</span>];</span><br><span class="line">grow[<span class="number">2</span>] = grow[<span class="number">1</span>];</span><br><span class="line">grow[<span class="number">1</span>] = <span class="keyword">new</span>;</span><br><span class="line">num[i] = grow[<span class="number">1</span>] + grow[<span class="number">2</span>] + grow[<span class="number">3</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"当前%d月初\n一个月大的有%d只，两个月大的有%d只，三个月大的有%d只\n"</span>, i, grow[<span class="number">1</span>], grow[<span class="number">2</span>], grow[<span class="number">3</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"总计%d只\n\n"</span>, num[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前2月初</span></span><br><span class="line"><span class="comment">// 一个月大的有0只，两个月大的有1只，三个月大的有0只</span></span><br><span class="line"><span class="comment">// 总计1只</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前3月初</span></span><br><span class="line"><span class="comment">// 一个月大的有1只，两个月大的有0只，三个月大的有1只</span></span><br><span class="line"><span class="comment">// 总计2只</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前4月初</span></span><br><span class="line"><span class="comment">// 一个月大的有1只，两个月大的有1只，三个月大的有1只</span></span><br><span class="line"><span class="comment">// 总计3只</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前5月初</span></span><br><span class="line"><span class="comment">// 一个月大的有2只，两个月大的有1只，三个月大的有2只</span></span><br><span class="line"><span class="comment">// 总计5只</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前6月初</span></span><br><span class="line"><span class="comment">// 一个月大的有3只，两个月大的有2只，三个月大的有3只</span></span><br><span class="line"><span class="comment">// 总计8只</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前7月初</span></span><br><span class="line"><span class="comment">// 一个月大的有5只，两个月大的有3只，三个月大的有5只</span></span><br><span class="line"><span class="comment">// 总计13只</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前8月初</span></span><br><span class="line"><span class="comment">// 一个月大的有8只，两个月大的有5只，三个月大的有8只</span></span><br><span class="line"><span class="comment">// 总计21只</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前9月初</span></span><br><span class="line"><span class="comment">// 一个月大的有13只，两个月大的有8只，三个月大的有13只</span></span><br><span class="line"><span class="comment">// 总计34只</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前10月初</span></span><br><span class="line"><span class="comment">// 一个月大的有21只，两个月大的有13只，三个月大的有21只</span></span><br><span class="line"><span class="comment">// 总计55只</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前11月初</span></span><br><span class="line"><span class="comment">// 一个月大的有34只，两个月大的有21只，三个月大的有34只</span></span><br><span class="line"><span class="comment">// 总计89只</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前12月初</span></span><br><span class="line"><span class="comment">// 一个月大的有55只，两个月大的有34只，三个月大的有55只</span></span><br><span class="line"><span class="comment">// 总计144只</span></span><br></pre></td></tr></table></figure><p>如果了解到这题考的是斐波那契数列的话，也可以直接使用<code>该项的值等于前两项的和</code>这个结论</p><h3 id="逆推法"><a href="#逆推法" class="headerlink" title="逆推法"></a>逆推法</h3><blockquote><p>从已知结果出发，推出最初条件</p></blockquote><h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><p>假设银行的月利息是1.71%，现在某人打算先存一笔钱，四年后连本带息一共1000取出，请问最初应该存多少钱？</p><h4 id="思路分析-amp-实现代码-1"><a href="#思路分析-amp-实现代码-1" class="headerlink" title="思路分析&amp;实现代码"></a>思路分析&amp;实现代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUM 48</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RATE 0.0171</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> money = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">48</span>; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">money = money / (<span class="number">1</span> + RATE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"最初存%f元即可\n"</span>, money);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//最初存443.143714元即可</span></span><br></pre></td></tr></table></figure><p>没啥说的…</p><h2 id="枚举-穷举-算法"><a href="#枚举-穷举-算法" class="headerlink" title="枚举(穷举)算法"></a>枚举(穷举)算法</h2><blockquote><p>从所有候选答案中一个一个尝试是否符合要求(暴力)<del>无脑</del></p></blockquote><h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><p>给定五个数在它们中间任意使用加减乘除，不能用括号，计算出目标值有哪些方法</p><p>例如 5 5 5 5 5 = 5</p><p>其中一种解5+5+5-5-5=5</p><h4 id="思路分析-amp-实现代码-2"><a href="#思路分析-amp-实现代码-2" class="headerlink" title="思路分析&amp;实现代码"></a>思路分析&amp;实现代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> num[<span class="number">6</span>] = &#123;<span class="number">0</span>&#125;;<span class="comment">//等式左边的五个数</span></span><br><span class="line"><span class="keyword">double</span> target = <span class="number">0</span>;<span class="comment">//等式的预期结果</span></span><br><span class="line"><span class="keyword">char</span> raw_symbol[<span class="number">5</span>] = &#123;<span class="string">' '</span>, <span class="string">'+'</span>, <span class="string">'-'</span>, <span class="string">'*'</span>, <span class="string">'/'</span>&#125;;<span class="comment">//可供选择的运算符</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;<span class="comment">//记录有多少结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//5个数使用到了4个运算符，now_symbol[1]表示第一个运算符，其赋予的值对应着raw_symbol中的运算符，为1就为+，以此类推</span></span><br><span class="line"><span class="keyword">int</span> now_symbol[<span class="number">5</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入等式左边的五个数\n"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;num[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入等式的预期结果\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;target);</span><br><span class="line"><span class="keyword">for</span> (now_symbol[<span class="number">1</span>] = <span class="number">1</span>; now_symbol[<span class="number">1</span>] &lt;= <span class="number">4</span>; now_symbol[<span class="number">1</span>]++)<span class="comment">//枚举第一个运算符，下同</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((now_symbol[<span class="number">1</span>] != <span class="number">4</span>) || (num[<span class="number">2</span>] != <span class="number">0</span>))<span class="comment">//判断运算符是不是'/', 如果是'/'的话再检查除数是否为0, 下同</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (now_symbol[<span class="number">2</span>] = <span class="number">1</span>; now_symbol[<span class="number">2</span>] &lt;= <span class="number">4</span>; now_symbol[<span class="number">2</span>]++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((now_symbol[<span class="number">2</span>] != <span class="number">4</span>) || (num[<span class="number">3</span>] != <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (now_symbol[<span class="number">3</span>] = <span class="number">1</span>; now_symbol[<span class="number">3</span>] &lt;= <span class="number">4</span>; now_symbol[<span class="number">3</span>]++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((now_symbol[<span class="number">3</span>] != <span class="number">4</span>) || (num[<span class="number">3</span>] != <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (now_symbol[<span class="number">4</span>] = <span class="number">1</span>; now_symbol[<span class="number">4</span>] &lt;= <span class="number">4</span>; now_symbol[<span class="number">4</span>]++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((now_symbol[<span class="number">4</span>] != <span class="number">4</span>) || (num[<span class="number">4</span>] != <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//由于运算符之间还有优先级，不能直接从左到右计算</span></span><br><span class="line"><span class="comment">//在这里我们引用两个变量left和right来记录即将进行运算的两个变量</span></span><br><span class="line"><span class="comment">//再引用一个变量sign  -1|+1，</span></span><br><span class="line"><span class="keyword">double</span> left = <span class="number">0</span>, right = num[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> sign = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span>(raw_symbol[now_symbol[i]])</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//这里的代码思路是先计算这次运算符左右的left和right，但是这次并没有急着运算‘left ‘+-*/’ right’，而是看下一个运算符，如果不是为'*'or'/'才进行left和right之间的运算</span></span><br><span class="line"><span class="comment">//sign就是记录left和right之间是+还是-</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">left = left + sign * right;</span><br><span class="line">sign=<span class="number">1</span>;</span><br><span class="line">right = num[i+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">left = left + sign * right;</span><br><span class="line">sign = <span class="number">-1</span>;</span><br><span class="line">right = num[i+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">right = right * num[i+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">right = right / num[i+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((left + sign * right) == target)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line">                                        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= <span class="number">4</span>;j++)</span><br><span class="line">                                            <span class="built_in">printf</span>(<span class="string">"%f%c"</span>,num[j], raw_symbol[now_symbol[j]]);</span><br><span class="line">                                        <span class="built_in">printf</span>(<span class="string">"%f=%f\n"</span>,num[<span class="number">5</span>], target);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"一共%d种解法\n"</span>, count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 请输入等式左边的五个数</span></span><br><span class="line"><span class="comment">// 5 5 5 5 5 </span></span><br><span class="line"><span class="comment">// 请输入等式的预期结果</span></span><br><span class="line"><span class="comment">// 5</span></span><br><span class="line"><span class="comment">// 5.000000+5.000000+5.000000-5.000000-5.000000=5.000000</span></span><br><span class="line"><span class="comment">// 5.000000+5.000000-5.000000+5.000000-5.000000=5.000000</span></span><br><span class="line"><span class="comment">// 5.000000+5.000000-5.000000-5.000000+5.000000=5.000000</span></span><br><span class="line"><span class="comment">// 5.000000+5.000000-5.000000*5.000000/5.000000=5.000000</span></span><br><span class="line"><span class="comment">// 5.000000+5.000000-5.000000/5.000000*5.000000=5.000000</span></span><br><span class="line"><span class="comment">// 5.000000+5.000000*5.000000-5.000000*5.000000=5.000000</span></span><br><span class="line"><span class="comment">// 5.000000+5.000000*5.000000/5.000000-5.000000=5.000000</span></span><br><span class="line"><span class="comment">// 5.000000+5.000000/5.000000-5.000000/5.000000=5.000000</span></span><br><span class="line"><span class="comment">// 5.000000+5.000000/5.000000*5.000000-5.000000=5.000000</span></span><br><span class="line"><span class="comment">// 5.000000-5.000000+5.000000+5.000000-5.000000=5.000000</span></span><br><span class="line"><span class="comment">// 5.000000-5.000000+5.000000-5.000000+5.000000=5.000000</span></span><br><span class="line"><span class="comment">// 5.000000-5.000000+5.000000*5.000000/5.000000=5.000000</span></span><br><span class="line"><span class="comment">// 5.000000-5.000000+5.000000/5.000000*5.000000=5.000000</span></span><br><span class="line"><span class="comment">// 5.000000-5.000000-5.000000+5.000000+5.000000=5.000000</span></span><br><span class="line"><span class="comment">// 5.000000-5.000000*5.000000+5.000000*5.000000=5.000000</span></span><br><span class="line"><span class="comment">// 5.000000-5.000000*5.000000/5.000000+5.000000=5.000000</span></span><br><span class="line"><span class="comment">// 5.000000-5.000000/5.000000+5.000000/5.000000=5.000000</span></span><br><span class="line"><span class="comment">// 5.000000-5.000000/5.000000*5.000000+5.000000=5.000000</span></span><br><span class="line"><span class="comment">// 5.000000*5.000000+5.000000-5.000000*5.000000=5.000000</span></span><br><span class="line"><span class="comment">// 5.000000*5.000000-5.000000*5.000000+5.000000=5.000000</span></span><br><span class="line"><span class="comment">// 5.000000*5.000000*5.000000/5.000000/5.000000=5.000000</span></span><br><span class="line"><span class="comment">// 5.000000*5.000000/5.000000+5.000000-5.000000=5.000000</span></span><br><span class="line"><span class="comment">// 5.000000*5.000000/5.000000-5.000000+5.000000=5.000000</span></span><br><span class="line"><span class="comment">// 5.000000*5.000000/5.000000*5.000000/5.000000=5.000000</span></span><br><span class="line"><span class="comment">// 5.000000*5.000000/5.000000/5.000000*5.000000=5.000000</span></span><br><span class="line"><span class="comment">// 5.000000/5.000000+5.000000-5.000000/5.000000=5.000000</span></span><br><span class="line"><span class="comment">// 5.000000/5.000000-5.000000/5.000000+5.000000=5.000000</span></span><br><span class="line"><span class="comment">// 5.000000/5.000000*5.000000+5.000000-5.000000=5.000000</span></span><br><span class="line"><span class="comment">// 5.000000/5.000000*5.000000-5.000000+5.000000=5.000000</span></span><br><span class="line"><span class="comment">// 5.000000/5.000000*5.000000*5.000000/5.000000=5.000000</span></span><br><span class="line"><span class="comment">// 5.000000/5.000000*5.000000/5.000000*5.000000=5.000000</span></span><br><span class="line"><span class="comment">// 5.000000/5.000000/5.000000*5.000000*5.000000=5.000000</span></span><br><span class="line"><span class="comment">// 一共32种解法</span></span><br></pre></td></tr></table></figure><h2 id="递归算法"><a href="#递归算法" class="headerlink" title="递归算法"></a>递归算法</h2><blockquote><p>直接或间接的调用自己的算法</p></blockquote><h4 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h4><p>计算阶乘</p><h4 id="思路分析-amp-实现代码-3"><a href="#思路分析-amp-实现代码-3" class="headerlink" title="思路分析&amp;实现代码"></a>思路分析&amp;实现代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fact</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> n*fact(n<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"输入n\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d的阶乘为%d\n"</span>, n, fact(n));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//输入n</span></span><br><span class="line"><span class="comment">//10</span></span><br><span class="line"><span class="comment">//10的阶乘为3628800</span></span><br></pre></td></tr></table></figure><h2 id="分治算法"><a href="#分治算法" class="headerlink" title="分治算法"></a>分治算法</h2><blockquote><p>把一个问题分为很多个相同类型的小问题进行求解，最后合并处理小问题的解来达到最终问题的解</p></blockquote><h4 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h4><p>输入参赛人数(n=2^k)，安排比赛日程，如图</p><p><img src="/Users/ratdischen/Desktop/Screen Shot 2018-12-17 at 3.50.04 PM.png" alt="Screen Shot 2018-12-17 at 3.50.04 PM"></p><p>很容易观察发现红线划分的区域左上角和右下角是一样的，右上角和左下角是一样的，直接上代码</p><h4 id="思路分析-amp-实现代码-4"><a href="#思路分析-amp-实现代码-4" class="headerlink" title="思路分析&amp;实现代码"></a>思路分析&amp;实现代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//这里我定义最大人数为8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 8</span></span><br><span class="line"><span class="keyword">int</span> arrangement[MAX+<span class="number">1</span>][MAX+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// start:从第几个人开始安排，p_num:安排几个人</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">arrange</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> p_num)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="comment">//解决小问题(二人分组)</span></span><br><span class="line"><span class="keyword">if</span>(p_num == <span class="number">2</span>)&#123;</span><br><span class="line">arrangement[start][<span class="number">1</span>] = start;</span><br><span class="line">arrangement[start][<span class="number">2</span>] = start + <span class="number">1</span>;</span><br><span class="line">arrangement[start + <span class="number">1</span>][<span class="number">1</span>] = start + <span class="number">1</span>;</span><br><span class="line">arrangement[start + <span class="number">1</span>][<span class="number">2</span>] = start;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//大问题分成小问题(多人最终分成二人)</span></span><br><span class="line">arrange(start, p_num/<span class="number">2</span>);</span><br><span class="line">arrange(p_num/<span class="number">2</span> +start, p_num/<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//总结规律进行合并</span></span><br><span class="line"><span class="comment">//左下角复制到右上角</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= p_num/<span class="number">2</span>+start+<span class="number">1</span>; i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (j = p_num/<span class="number">2</span> + <span class="number">1</span>; j &lt;= p_num; j++)&#123;</span><br><span class="line">arrangement[i][j] = arrangement[i + p_num/<span class="number">2</span>][j - p_num/<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//左上角复制到右下角</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = start + p_num/<span class="number">2</span>; i &lt; start + p_num; i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (j = p_num/<span class="number">2</span> + <span class="number">1</span>; j &lt;= p_num; j++)&#123;</span><br><span class="line">arrangement[i][j] = arrangement[i - p_num/<span class="number">2</span>][j - p_num/<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入参赛人数\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num);</span><br><span class="line">arrange(<span class="number">1</span>, num);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= num; j++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t"</span>, arrangement[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 请输入参赛人数</span></span><br><span class="line"><span class="comment">// 8</span></span><br><span class="line"><span class="comment">// 12345678</span></span><br><span class="line"><span class="comment">// 21436587</span></span><br><span class="line"><span class="comment">// 34127856</span></span><br><span class="line"><span class="comment">// 43218765</span></span><br><span class="line"><span class="comment">// 56781234</span></span><br><span class="line"><span class="comment">// 65872143</span></span><br><span class="line"><span class="comment">// 78563412</span></span><br><span class="line"><span class="comment">// 87654321</span></span><br></pre></td></tr></table></figure><h2 id="贪婪算法"><a href="#贪婪算法" class="headerlink" title="贪婪算法"></a>贪婪算法</h2><blockquote><p>是一种在每一步选择中都采取在当前状态下最好或最优（即最有利）的选择，从而希望导致结果是最好或最优的算法</p></blockquote><h4 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h4><p>分钱问题</p><h4 id="思路分析-amp-实现代码-5"><a href="#思路分析-amp-实现代码-5" class="headerlink" title="思路分析&amp;实现代码"></a>思路分析&amp;实现代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;float.h&gt;</span></span></span><br><span class="line"><span class="comment">//这里定义了9种钱币大小,以分为单位,从大到小排列</span></span><br><span class="line"><span class="keyword">int</span> cash[<span class="number">10</span>] = &#123;<span class="number">0</span>, <span class="number">10000</span>, <span class="number">5000</span>, <span class="number">1000</span>, <span class="number">500</span>, <span class="number">200</span>, <span class="number">100</span>, <span class="number">50</span>, <span class="number">20</span>, <span class="number">10</span>&#125;;</span><br><span class="line"><span class="comment">//记录每种钱币的张数num[1] = 1就代表一张一百</span></span><br><span class="line"><span class="keyword">int</span> num[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exchange</span><span class="params">(<span class="keyword">int</span> money)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(money)&#123;</span><br><span class="line"><span class="comment">//不足一毛给一毛</span></span><br><span class="line"><span class="keyword">if</span> (money &lt;= <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">num[<span class="number">9</span>]++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"不足一毛给一毛\n"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//贪婪法每次都寻找当前最优解，这里就是寻找小于money的最大钱币大小</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cash[i] &lt;= money)</span><br><span class="line">&#123;</span><br><span class="line">money -= cash[i];</span><br><span class="line">num[i]++;</span><br><span class="line"><span class="comment">//对该大小的钱币再次确认是否可用</span></span><br><span class="line">i--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> money;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入需要分钱的总钱数\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;money);</span><br><span class="line">exchange((<span class="keyword">int</span>)(money*<span class="number">100</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%6.2lf元|%d张\n"</span>, cash[i]/<span class="number">100.0</span>, num[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 请输入需要分钱的总钱数</span></span><br><span class="line"><span class="comment">// 68.9</span></span><br><span class="line"><span class="comment">// 100.00元|0张</span></span><br><span class="line"><span class="comment">//  50.00元|1张</span></span><br><span class="line"><span class="comment">//  10.00元|1张</span></span><br><span class="line"><span class="comment">//   5.00元|1张</span></span><br><span class="line"><span class="comment">//   2.00元|1张</span></span><br><span class="line"><span class="comment">//   1.00元|1张</span></span><br><span class="line"><span class="comment">//   0.50元|1张</span></span><br><span class="line"><span class="comment">//   0.20元|2张</span></span><br><span class="line"><span class="comment">//   0.10元|0张</span></span><br></pre></td></tr></table></figure><p>值得一提的是…这个题刚做时没有意识到<code>Double</code>的误差…结果报道上出现了偏差废了不少时间..QAQ苦涩</p><h2 id="试探算法（回溯法）"><a href="#试探算法（回溯法）" class="headerlink" title="试探算法（回溯法）"></a>试探算法（回溯法）</h2><blockquote><p>先选择某一种可能的情况进行试探，在试探过程中，一旦发现此选择的假设是错误的，就退回一步重新选择，继续向前试探，如此反复进行，直到证明解或者无解。</p></blockquote><h4 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h4><p>生成号码组合。假设有一种彩票，每注由n个1~m的数字组成，且这n个数字不能重复，编写程序生成所有号码的组合</p><h4 id="思路分析-amp-实现代码-6"><a href="#思路分析-amp-实现代码-6" class="headerlink" title="思路分析&amp;实现代码"></a>思路分析&amp;实现代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可用的数字0-29</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> C_NUM 29</span></span><br><span class="line"><span class="comment">//生成的数字个数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R_NUM 7</span></span><br><span class="line"><span class="comment">//标记已经使用过的数字</span></span><br><span class="line"><span class="keyword">int</span> used[C_NUM + <span class="number">1</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">//储存生成的结果</span></span><br><span class="line"><span class="keyword">int</span> reason[R_NUM + <span class="number">1</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">//remain:还需要生成几次</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">combine</span><span class="params">(<span class="keyword">int</span> remain)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (remain)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp = rand()%C_NUM + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (used[temp])</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//生成重复就再来一次</span></span><br><span class="line">combine(remain);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">used[temp]++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d \t"</span>, temp);</span><br><span class="line">remain--;</span><br><span class="line">combine(remain);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">combine(R_NUM);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 17 25 24 13 3 28 1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;以后会陆陆续续写一些关于算法的笔记，欢迎交流学习&lt;/p&gt;
&lt;p&gt;学习视频&lt;a href=&quot;https://bt.byr.cn
      
    
    </summary>
    
      <category term="note" scheme="https://ratdis.github.io/categories/note/"/>
    
    
      <category term="c" scheme="https://ratdis.github.io/tags/c/"/>
    
      <category term="algorithm" scheme="https://ratdis.github.io/tags/algorithm/"/>
    
      <category term="learning" scheme="https://ratdis.github.io/tags/learning/"/>
    
  </entry>
  
  <entry>
    <title>Android软件数据备份以及管理优化</title>
    <link href="https://ratdis.github.io/2018/11/18/android-backup-and-management/"/>
    <id>https://ratdis.github.io/2018/11/18/android-backup-and-management/</id>
    <published>2018-11-18T09:17:17.000Z</published>
    <updated>2019-03-26T14:31:31.720Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>最近有些力不从心，重装macOS后又得重装Android(最近Sony终于咕咕咕的更新了安卓P)，服务器也都重装，为啥重装呢…因为有点系统洁癖，这篇文章下我总结下安卓重装后的一些操作，会涉及到刷机前的备份准备以及刷机后系统的管理优化，希望对你有所帮助。</p><blockquote><p>下面的大部分操作需要root</p></blockquote><h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><p>备份是个好习惯，即使不刷机定时备份也是很重要的，备份一般包括App和App的数据，短信联系人，各种系统设置之类的，在这里我们只考虑备份App和App的数据的情况</p><p>在备份之前我们先对安卓下软件数据进行了解</p><h3 id="备份原理"><a href="#备份原理" class="headerlink" title="备份原理"></a>备份原理</h3><p>在Android中的APK是<code>Android Package</code>的缩写，即Android安装包，其实就是一种压缩文件，安装软件时会自动把APK移动到<code>/data/app/</code>下，解压并把dex文件保存到<code>/data/dalvik-cache/</code>目录，接着在<code>/data/data/</code>目录下创建对应的应用数据目录</p><p><code>/data/app/</code>这个目录下都是第三方软件，而系统软件的APK存储在了<code>/system/app/</code>下</p><p>提下<code>/system/app/</code> 和<code>/data/app/</code>的区别</p><ul><li><code>/data/app/</code>下的 普通用户可以卸载，<code>/system/app/</code>下的 只能 root 后删除</li><li><code>/data/app/</code>下的软件即使静默也可以收到各种广播信息，<code>/system/app/</code>下的就不能</li></ul><p>软件的私有数据大部分都存放在<code>/data/data/</code>和<code>/storage/emulated/0/Android/data/</code>下，除了这两个有些大型游戏往往还会有个<code>/storage/emulated/0/Android/obb/</code>，OBB文件(Opaque Binary Blob)是安卓游戏通用数据包，存的都是游戏中所用到的资源，对于有些游戏会将OBB解包<code>/storage/emulated/0/Android/data/</code>目录下，但是也有直接读取不解包的</p><h3 id="开始备份"><a href="#开始备份" class="headerlink" title="开始备份"></a>开始备份</h3><p>有了以上的知识背景后我们就可以手动对应用进行备份了，不过这样不够优雅，手动复制打包移动这些操作早就有了很多自动化的软件了</p><p><del>在这里我们使用钛备份进行各种备份和还原操作</del></p><p><del>具体的软件操作就不多说了，虽然界面万年不变但是还是比较容易上手的</del></p><p><del>接着分析钛备份生成的备份文件，我们会发现当备份一个App以及数据后会生成三个文件，一个文件以<code>.properties</code>结尾，里面记录了一些备份的系统环境和备份软件的版本号之类的信息，给以后还原加载验证用的，另外两个都是<code>gz</code>格式的压缩包，其中一个中含有APK，另一个里面还是个压缩包，压缩着该软件的各种数据，就是上文所提及到的<code>/data/各种文件</code>，钛备份默认不备份软件的缓存文件，通过测试发现钛备份还不会备份obb文件，还得需要手动备份一下，不过问题不大，毕竟用得到obb的还是少数软件，在专业版中可以很方便的使用一键备份和还原所有，计划备份，支持各种国外云备份以及加密也是不错的，可以说是瑕不掩瑜了</del></p><p><del>至于备份联系人短信之类的…</del></p><p>在我使用过<code>Swift Backup</code>后，我只能说句“真香”</p><p>同样支持Pro版计划备份，一键备份和还原，最重要的是支持obb·短信·通话·联系人备份！！，虽然仅支持Google Drive云备份，但是光是界面就不知道比钛备份高到哪里去了，一年订阅Pro1.99刀，5.99刀买断，还是很划算的</p><p>备份文件分析的话，软件数据备份后，会有一个<code>.app</code>结尾的文件，后缀改成apk就是安装包，以<code>.dat</code>结尾的改成zip，里面压缩的就是上文提及到的各种软件数据文件夹(/data/下的)，以<code>.extdat</code>结尾的压缩的是<code>/storage/emulated/0/Android/data/</code>下的，以<code>.exp</code>结尾的是obb文件，只是改了个名字，大小没变，另外还会生成一个<code>.xml</code>的文件，内容经过一些处理，不出意料和钛备份中的.<code>properties</code>文件作用差不多，如果我们在设置中设置了备份加密的话，密匙可能就是存在这个文件中</p><p>至于备份通讯录和短信之类的文件涉及到数据库之类的，技术受限这里就不做分析了，感兴趣的可以尝试下</p><p>备份工作做好就可以强刷固件了(Sony)，一般手机都是Recovery下卡刷ROM包的，具体流程Google一下各自手机型号刷机教程即可</p><h2 id="管理优化"><a href="#管理优化" class="headerlink" title="管理优化"></a>管理优化</h2><p>由于Android的开放，给了一些软件滥用权限可乘之机，为了保护个人隐私和手机的流畅，必须采取一些措施对付了</p><h3 id="管理工具软件"><a href="#管理工具软件" class="headerlink" title="管理工具软件"></a>管理工具软件</h3><p>建议先下一个类似于<code>Appops</code>的权限管理软件以及<code>黑阀</code>管理后台再安装各类软件，安装一个管理一个</p><p>如果你的手机能刷Xposed框架的话(推荐刷Magisk中的Systemless的Xposed)，有很多模块都很好用，由于我手机用的官方固件没法刷进Xposed…所以你懂我意思8</p><p>那就写点各类软件推荐</p><ul><li><p>Appops    管理软件的各种权限，可对付那种不给权限就不让用的流氓，但支付宝的SD卡读取权限压不住，仍可以读取，目前无解，大部分软件还是很管用的</p></li><li><p>Brevent(黑阀)    管理软件后台的软件，很管用就是了</p></li><li><p>SD Maid &amp; Dir   都是清理软件的，前者的话个人还用它来卸载和管理自启权限，后者的对国内流氓文件很棒</p></li><li><p>Airfrozen(空调狗)   冻结流氓和不常用软件的，这类软件很多，只是我一直都是用的这个就是了</p><p>Play上都可以下到，管理软件就差不多这些了</p></li></ul><h3 id="使用IFW管理缓存活动唤醒"><a href="#使用IFW管理缓存活动唤醒" class="headerlink" title="使用IFW管理缓存活动唤醒"></a>使用IFW管理缓存活动唤醒</h3><p>除开以上提到的工具，还值得一提的是是IFW(<code>Intent Firewall</code>)这个玩意</p><p>这是一个起到过滤到Intent的东西，在Android中软件都是使用Intent这个玩意启动新活动、新服务等，我们可以使用这个来阻止一些并不需要的东西开启</p><p>系统是读取<code>/data/system/ifw/</code>下的xml来过滤掉Intent(允许多个文件，可叠加)，我们可以自己编写xml进行过滤，具体怎么写，可以参考<a href="https://selinuxproject.org/page/NB_SEforAndroid_2#ifw.xml" target="_blank" rel="noopener">这里</a>，<del>自己写是不可能的，这辈子都不可能的（逃</del>    可以直接使用已经写好的xml文件<a href="https://github.com/apkjam/IFW" target="_blank" rel="noopener">Github</a> ，复制到<code>/data/system/ifw/</code>下，xml改成644权限，无需重启即刻生效</p><p>但是有些流氓会检查自己申请的服务有没有正常开启，如果没有就会一直发送请求，反而会导致系统资源的消耗和设备耗电量的增加…就很尴尬</p><p>就我日常使用带来的效果还是很明显的，诸如微信这种不得不的后台缓存低了不少</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结?!"></a>总结?!</h2><p>现在手机性能普遍过剩，在我看来运用以上的方法管理好已经够用，最重要的还是保持良好的使用习惯，定时清理下垃圾，远离国内几大流氓厂，能用浏览器快捷解决的绝不下个软件，即使要下也去Play上下</p><p>愿国内安卓生态环境早日转好，虽然不抱什么希望就是了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;最近有些力不从心，重装macOS后又得重装Android(最近Sony终于咕咕咕的更新了安卓P)，服务器也都重装，为啥重装呢
      
    
    </summary>
    
      <category term="system" scheme="https://ratdis.github.io/categories/system/"/>
    
    
      <category term="backup" scheme="https://ratdis.github.io/tags/backup/"/>
    
      <category term="android" scheme="https://ratdis.github.io/tags/android/"/>
    
      <category term="management" scheme="https://ratdis.github.io/tags/management/"/>
    
  </entry>
  
</feed>
